[
  {
    "id": "1",
    "theme": "w",
    "title": "Что такое прогрессивный рендеринг?",
    "answer": "Обобщенное название технологии, которое используется для ускорения отрисовки web-страниц. Основная идея - это как можно раньше указать пользователю визуальный контент. Основная задача - уменьшение времени загрузки.\nК технологиям прогрессивного рендеринга можно отнести: \n\n\t1.Линейную загрузку картинок. При отрисовке страницы отображаются только те картинки, которые находятся в видимой области экрана;\n\n\t 2.Приоритизация видимого контента. При этом подходе минимизируют и инкапсулируют стили, разметку и скрипты для той части страницы, которую пользователь увидит первой. Для реализации можно использовать события DOMContentLoaded и load, либо применять отложенные скрипты, чтобы догрузить остальные ресурсы.\n\n\t3.Асинхронные фрагменты HTML. Идея похожа на SSR (Server Side Rendering). В браузер отправляются HTML страницы, созданные на backend.",
    "codeexample": "",
    "images": []
  },
  {
    "id": "2",
    "theme": "w",
    "title": "Разница между адаптивным (adaptive) и отзывчивым (responsive) дизайнами?",
    "answer": "Адаптивный (adaptive) и отзывчивый (responsive) дизайн — это два подхода к созданию веб-сайтов и приложений, которые могут эффективно работать на устройствах с разными размерами экранов. Несмотря на то, что оба подхода имеют одну цель — улучшить пользовательский опыт на различных устройствах, они достигают этой цели по-разному. \n\nАдаптивный дизайн (Adaptive Design). \n\tСтруктура: В адаптивном дизайне создаются несколько фиксированных макетов для различных размеров экранов. Например, один макет для мобильных устройств, другой для планшетов, третий для десктопов. \n\tКак работает: Когда пользователь открывает сайт, адаптивный дизайн определяет размер экрана и загружает соответствующий макет. \n\tГибкость: Адаптивный дизайн менее гибок, поскольку макеты создаются заранее и адаптируются только к определённым размерам экранов. \n\tЧаще используется в проектах, где требуется более точный контроль над отображением контента на различных устройствах. \n\nОтзывчивый дизайн (Responsive Design) \n\n\tСтруктура: В отзывчивом дизайне используется единый гибкий макет, который адаптируется к любому размеру экрана. Это достигается с помощью медиа-запросов, гибких сеток (flexbox, grid) и относительных единиц измерения (проценты, em, rem). \n\n\tКак работает: Макет автоматически подстраивается под размер экрана в реальном времени, меняя свою структуру и элементы в зависимости от доступного пространства. \n\n\tГибкость: Отзывчивый дизайн более гибок, так как он не ограничивается фиксированными макетами и плавно адаптируется к любому экрану.",
    "codeexample": "",
    "images": []
  },
  {
    "id": "3",
    "theme": "w",
    "title": "Разница между Progressive Enhancement и Graceful Degradation?",
    "answer": "Оба подхода используются для создания кросс-платформенных и кросс-браузерных интерфейсов. \n\nProgressive Enhancement предполагает создание веб-интерфейса от простого к сложному (как вариант сначала создание приложения на мобильном устройстве, потом под планшет, потом десктоп). \n\nGraceful Degradation это создание в обратном порядке - от наиболее сложного к более простому (от десктопа к мобильному, или от более современных браузеров к более слабым)",
    "codeexample": "",
    "images": []
  },
  {
    "id": "4",
    "theme": "w",
    "title": "Что такое кроссбраузерность?",
    "answer": "Это корректная адаптивная верстка для правильного отображения сайта в разных браузерах и на разных устройствах.",
    "codeexample": "",
    "images": []
  },
  {
    "id": "5",
    "theme": "w",
    "title": "Что такое Babel? Для чего он используется?",
    "answer": "Babel - это транспайлер, который переписывает код современного стандарта JavaScript на более поздний. \nТранспайлер - это программа позволяющая менять исходный код одной программы на эквивалентный исходный код на другом языке. Обычно Babel работает на сервере в составе системы сборки JS-кода, например, Webpack. \nОсновная идея использования  Babel, в том, что Ecma International каждый год выпускает обновление для  JavaScript. Однако эти обновления в браузер внедряются  постепенно, чтобы не терять время, а сразу начать использовать новый функционал, который зачастую упрощают разработку используются Babel, которая осуществлять траспиляцию новых конструкций в старые варианты для лучше кроссбраузерности. \nКонфигураци Babel прописывается в файле babel.config, либо .babelrc для настроек одного пакета, а также указывается в package.json.",
    "codeexample": "",
    "images": []
  },
  {
    "id": "6",
    "theme": "w",
    "title": "Разница между feature detection, feature inference и анализом строки user-agent?",
    "answer": "Все три подхода обозначены для определения браузерных возможностей пользователя. \n\nFeature detection или определения возможностей браузера заключается в определении поддерживает ли браузер определенный блок кода и если блок не поддерживается, то будет выполнен аналог или полифил. Такой подход помогает обеспечить работоспособность и предотвратить сбои и ошибки. Пример такого подхода - это библиотека Modernizr. \n\nFeature inference или определение возможностей - это проверка на наличие определенных возможностей. Подход примеряет функцию, которая предполагает, что определенная возможность уже существует. \n\nUser-agent - это строка сообщаемая браузером, которая позволяет определить тип приложения, операционную систему, поставщика программного обеспечения. Доступ к ней можно получить через navigator.userAgent. Следует отметить, что два последних подхода не рекомендовано использовать, так как самым надежным является feature detection.",
    "codeexample": "//Feature detection \nif('geolocation' in navigator) {\n//use navigator.geolocation\n} else {\n//another code\n}\n\n//Feature inference\nif (document.getElementsByTagName) {\nelement = document.getElementById(id);\n}\n\n// User Agent\nconsole.log(navigator.userAgent);\n \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebkit/537.36 (KHTML, like Geco) Chrome/91.0.4472.106 Safari/537.36\"",
    "images": []
  },
  {
    "id": "7",
    "theme": "w",
    "title": "Разница между layout, painting и compositing?",
    "answer": "Все три этапа относятся к отрисовке веб-страницы. \n\nLayout или раскладка - это расчет места для объекта на основе css правил. Painting или отрисовка - это рисование пикселей для отображения визуальных элементов. \n\nСompositing или композиция - это отрисовка слоев в определенном порядке, то есть правильное наложение.",
    "codeexample": "",
    "images": [
      "https://www.dropbox.com/scl/fi/sfj3yg7g03kmgxp8hb4mt/The-construction-process-of-render-tree.webp?rlkey=pog0sjguxzo6n55rug647rbm2&st=47qbop9z&dl=1"
    ]
  },
  {
    "id": "8",
    "theme": "w",
    "title": "Что такое безопасные (Secure) и HttpOnly cookies?",
    "answer": "Безопасные куки отсылаются на сервер только если запросы выполняется по протоколу SSL и HTTPS, однако важные данные никогда не следует передавать или хранить в cookies, поскольку сам их механизм весьма уязвим в отношении безопасности по flag secure никакого дополнительного шифрования или средств защиты не обеспечивает. Начиная с 52 версии в Chrome и FireFox не защищённые сайты с протоколом http не могут создавать куки с флагом secure. Куки HTTP Only недоступны из javascrip через свойство document.cookie и через xml http request, а также request API, что помогает избежать межсайтового скриптинга или XSS. Устанавливать этот флаг можно для тех cookie к которым не требуется обращаться через javascrip в частности если куки используются только для поддержки сеанса то в javascrip они не нужны. Так что в этом случае следует устанавливать флаг http only.",
    "codeexample": "",
    "images": [
      "https://www.dropbox.com/scl/fi/uxb0e6gcs84n00yllwzzc/1-16.webp?rlkey=2xdl228rnfm40nwv7agfx0tb0&st=9dife3ur&dl=1"
    ]
  },
  {
    "id": "9",
    "theme": "w",
    "title": "Что такое Content Security Policy (CSP)?",
    "answer": "CSP - политика безопасности контента. CSP - это http header который позволяет операторам сайта детально контролировать откуда могут быть загружены ресурсы на их сайт. Использование данного заголовка - это лучший способ предотвратить уязвимость межсайтового скриптинга или xss и атаки внедрения данных. CSP является обязательным для всех новых веб-сайтов и настоятельно рекомендуется для всех существующих сайтов с высоким уровнем риска. В случае, если сайт не предоставляет CSP заголовки браузер в свою очередь будет использовать стандартные правила по ограничению домена. Настройка CSP включает в себя добавление на страницу http-заголовка Content Security Policy и его настройку в соответствии со списком доверенных источников из которых пользователь может получать контент.",
    "codeexample": "",
    "images": [
      "https://www.dropbox.com/scl/fi/4mmwcehunr2v2iqpzap6o/content-security-policy.webp?rlkey=iitfy6jnymgtzlnbovsjqxpq7&st=kud302e2&dl=1"
    ]
  },
  {
    "id": "10",
    "theme": "w",
    "title": "Что такое межсайтовый скриптинг (XSS)?",
    "answer": "Межсайтовый скриптинг или XSS - это довольно распространённая уязвимость которую можно обнаружить на множестве web приложений. Суть довольно проста: злоумышленнику удаётся внедрить на страницу JS код, который не был предусмотрен разработчиками. Этот код будет выполняться каждый раз, когда пользователи будут заходить на страницу приложения, куда этот код был добавлен. Страница, предоставляемая сервером, когда кто-то её запрашивает при этом не изменяется, вместо этого XSS атака использует уязвимость на странице, которая включает переменную отправленную в запрос для отображения в необработанном виде в ответе. Специфика подобных атак заключается в том, что вредоносный код может использовать авторизацию пользователя в веб-системе для получения к ней расширенного доступа или для получения авторизационных данных пользователя.",
    "codeexample": "",
    "images": [
      "https://www.dropbox.com/scl/fi/nsw1qshz6vu1i1mqfxja7/91d2b78d5464ef6a6e6cb.gif?rlkey=y7jim44zj2co7dhlt04osdy43&st=wl3fjw6d&dl=1"
    ]
  },
  {
    "id": "11",
    "theme": "w",
    "title": "Что Такое API?",
    "answer": "API (Application programming interface) - это интерфейс для взаимодействия между различными программными компонентами. API предоставляет набор функций и протоколов, которые позволяют приложениям общаться друг с другом. Проще говоря, API позволяет одному приложению запрашивать и манипулировать данными или функциями другого приложения или сервиса, что облегчает интеграцию и расширение функциональности без необходимости глубокого понимания внутренней логики других приложений. API часто используется для выполнения базовых операций с данными — создания (Create), чтения (Read), обновления (Update) и удаления (Delete) данных (CRUD-операции). Эти операции реализуются через HTTP-запросы, такие как POST, GET, PUT и DELETE, направленные на определенные URL-адреса.",
    "codeexample": "",
    "images": []
  },
  {
    "id": "12",
    "theme": "w",
    "title": "Что такое CDN?",
    "answer": "CDN (Content delivery network) - это сеть распределенных серверов, которые совместно работают для обеспечения быстрой и надежной доставки контента пользователям. Серверы в CDN расположены в различных географических точках по всему миру и содержат копии статических ресурсов, таких как изображения, видео, стили, скрипты и другие данные. Когда пользователь запрашивает ресурс, CDN перенаправляет запрос на ближайший сервер к пользователю. Это минимизирует задержку и ускоряет время загрузки страницы. Децентрализованная структура позволяет избежать перегрузок и снижает риски отказа в случае выхода из строя одного из серверов.",
    "codeexample": "",
    "images": []
  },
  {
    "id": "13",
    "theme": "w",
    "title": "Что такое REST?",
    "answer": "REpresentational State Transfer то есть передача состояния представления - это архитектурный стиль взаимодействия компонентов распределённого приложения. В сети rest представляет собой согласованный набор ограничений, учитываемых при проектировании распределённой гипермедиасистемы. В определённых случаях, такие как например интернет-магазины, поисковые системы и прочие системы, основанные на данных, это приводит к повышению производительности и упрощению архитектуры. В общем случае rest является очень простым интерфейсом управления информацией без использования каких-то дополнительных внутренних прослоек. Каждая единица информации однозначно определяется глобальным идентификатором таким как URL, а каждый URL свою очередь имеет строго заданный формат. ",
    "codeexample": "",
    "images": []
  },
  {
    "id": "14",
    "theme": "w",
    "title": "Почему очищать кэш важно? Как это можно сделать?",
    "answer": "У каждого браузера есть кэш для временного хранения файлов на веб сайтах. Именно поэтому их не нужно повторно загружать при переключении между страницами или перезагрузки 1 и той же страницы.\nСервер настроен на отправку заголовков, которые сообщают браузеру о необходимости хранить файл в течении заданного периода времени. Поэтому при повторном открытии страницы часть файлов загружается из кэша- это значительно увеличивает скорость веб сайта и сохраняет пропускную способность.\nОднако в то же время это может вызвать проблемы. Например, когда веб сайт был изменен или обновлен в процессе разработки, поскольку кэш пользователя все еще ссылается на старые файлы это может либо оставить их со старой функциональностью, либо сломать веб сайт- если кэшированные файлы CSS и JavaScript ссылаются на элементы, которые больше не существуют, либо они перемещены/переименованы.\nПоэтому при деплое новой порции обновлений имеет смысл чистить кэш.\nОчистка кэша - это процесс при котором браузер загружает новые файлы это делается путем присваивания файлу имени, отличного от старого файла. Обычный способ заставить браузер повторно загрузить файл- это просто добавить строку запроса в конец файла. Например, сделать версионирование и в конце имени файла указать новое число. Браузер считать его другим файлом и загружает.",
    "codeexample": "",
    "images": []
  },
  {
    "id": "15",
    "theme": "w",
    "title": "Назовите критические этапы рендеринга?",
    "answer": "Критические этапы рендеринга или critical rendering pass - это последовательность шагов, которую выполняет браузер, когда HTML, CSS и JavaScript преобразуются в пиксели, которые видны на экране. \n\nСамый полный и последовательный список основных шагов выглядит следующим образом: \n\tDocument Object Model - ответ в виде HTML превращается в токены, которые в свою очередь превращаются в узлы и в последующем формируют DOM дерево. \n\tCss Object Mode или CSSOM: если html документ содержит стили, то припасинге они запрашиваются и участвуют в построении CSSOM, который содержит все стили страницы, то есть данные о том, как стилизовать DOM.  \n\tJavaScript - если html-документ содержит тег script, то происходит либо исполнение этого скрипта, либо запрос и исполнение сторонних подключенных скриптов. JavaScript в свою очередь может модифицировать DOM дерево. \n\tСледующий шаг - это Accessibility Tree при парсинге HTML анализируются специальное атрибуты по типу roll и area, в результате чего происходит построение так называемого дерева доступности, которое в последующем может использоваться скринридерами. \n\tRender Tree: на данном этапе происходит объединение DOM и CSSOM или объектной модели документа и ассоциированных стилей каждого элемента. Для построения дерева рендера браузер проверяет каждый узел DOM, начиная от корневого, и определяет, какие CSS правила нужно присоединить к этому узлу. Дерево рендера охватывает только видимое содержимое. \n\tLayout/Reflow - в тот момент, когда дерево рендера построено, становится возможным этап компоновки или layout. Этот этап определяет, где и как на странице будут позиционированы элементы, и каковы связи между элементами. Другими словами на основании размеров элемента определяется его положение. Первый шаг, как уже было сказано, называется layout, все последующие шаги, связанные с пересчётами размеров называются reflow. \n\tPaint/Repaint: когда дерево рендера создано, компоновка произошла, пиксели могут быть отрисованы. Если говорить просто, то на этом этапе происходит покраска веб-страницы согласно заданным стилям, первая покраска называется paint все последующие перекраски называются repaint. \n\tCompositing: заключительный шаг, когда готовые спозиционированные элементы выстраиваются друг относительно друга по уровням или потокам по умолчанию все элементы на странице идут в главном или в основном потоке, однако задание определённых CSS свойств может вырвать их из основного потока и сформировать новый. На этапе compositing элементы в разных потоках выстраиваются друг относительно друга.",
    "codeexample": "",
    "images": []
  },
  {
    "id": "16",
    "theme": "w",
    "title": "Разница между композицией и наследованием?",
    "answer": "Наследование - это концепция ООП, когда один класс наследует поля и методы другого класса, что обеспечивает возможность повторного использования кода. Предполагает тесную взаимосвязь между компонентами: производные компоненты должны наследовать свойства базового компонента, что сильно усложняет модификацию конкретного компонента. \n\nКомпозиция - это ещё одна концепция ООП, но в отличии от наследования, расширяемый класс ссылается на экземпляры другого класса. Предполагает наследование поведения,а не свойств, что существенно облегчает добавление новых свойств в конкретный компонент. Компоненты по возможности должны быть переиспользуемыми. Тесная связь наследующих компонентов делает их зависимыми от специфики реализации приложения в котором они используются. Композиция делает связи между компонентами слабыми, что повышает их автономность.",
    "codeexample": "",
    "images": [
      "https://www.dropbox.com/scl/fi/ritlrywh8nhv9glmhmwhi/tcvaa8gtnipg_ridjunpf9b1tu.gif?rlkey=aklb6yhadtjp0tn6yu9zrp6i1&st=6gvb96l6&dl=1",
      "https://www.dropbox.com/scl/fi/ae4bawenzdrgtns3qdpfk/qjjomgocinjckd5kxjmubl1gzqc.gif?rlkey=1q1q2j81zb5atfsdw0cu59576&st=5xwptagu&dl=1"
    ]
  },
  {
    "id": "17",
    "theme": "w",
    "title": "Какие принципы можно использовать вместе с наследованием?",
    "answer": "Есть ещё три важных принципа ООП которые можно использовать совместно с наследованием - это делегация, или поручение задачи от внешнего объекта к внутреннему, композиция- включение объектом контейнером объекта содержимого и управление его поведением, причём последний не может существовать вне первого и агрегация - включение объектом контейнером ссылки на объект содержимое при уничтожении первого последний продолжает существование.",
    "codeexample": "",
    "images": []
  },
  {
    "id": "18",
    "theme": "w",
    "title": "Основные принципы ООП?",
    "answer": "ООП (объектно-ориентированный подход программирования) базируется на 4 основных принципах: \n\n\tАбстракция - это отделение концепции от реализации. Основная идея состоит в том, чтобы представить объект минимальным объемом полей и методов для решения поставленной задачи. \n\n\tНаследование - это способность объекта или класса базироваться на другом объекте или классе. Это главный механизм для повторного использования кода, т.е при наследовании класса поток получает все методы и свойства класса родителя, при условии, что данные методы и свойство не являются приватными. \n\n\tИнкапсуляция - это размещение одного объекта или класса внутри другого для разграничения доступа к ним. \n\n\tПолиморфизм - это реализация задач одной и той же идеи разными способами.",
    "codeexample": "",
    "images": [
      "https://www.dropbox.com/scl/fi/zw6a0xw7x6cb1zwai4qii/scale_1200.webp?rlkey=463p86o2kgrw9fg7ck5y5g4dh&st=hst9ns1u&dl=1"
    ]
  },
  {
    "id": "19",
    "theme": "h",
    "title": "Что такое HTML и для чего он нужен?",
    "answer": "Это язык гипертекстовой разметки (HyperText Markup Language). Это стандартизированный язык, позволяющий создавать веб-страницы. Он интерпретируется браузером и отображается в виде структуры и содержания на веб-странице.",
    "codeexample": "",
    "images": []
  },
  {
    "id": "20",
    "theme": "h",
    "title": "Какие глобальные атрибуты есть в HTML?",
    "answer": "В HTML есть категория атрибутов, которые можно применять практически к любому тегу. \nСамый яркий пример глобального атрибута - это class, с помощью него можно осуществлять поиск или стилизацию элемента. В качестве значения он принимает строку. class может быть задан абсолютно любому тегу. \ncontenteditable делает любой элемент на странице  редактируемым, в качестве значения для атрибута используются булевы значения true или false. \ndata* - это группа атрибутов, позволяющая перекидывать данные между HTML и DOM часто используется для взаимодействия с HTML при помощи javascript. \nhidden не требует явного указания значения, наличие атрибута само по себе означает состояние true. Прячет на странице любой HTML-элемент, причём элемент не виден не только для глаз пользователя, но и для скридеров. \nspellcheck - с помощью этого атрибута можно указать браузеру, что в элементе, которому он задан, нужно проверить правописание. \ntabindex указывает браузеру нужно ли видеть этот элемент при навигации по странице с помощью клавиатуры, часто используется для не интерактивных элементов, значение - отрицательное или положительное целое число.",
    "codeexample": "",
    "images": []
  },
  {
    "id": "21",
    "theme": "h",
    "title": "Что такое категории контента в HTML5?",
    "answer": "Каждый элемент HTML принадлежит к некоторому количеству категорий контента которые объединяют элементы с общим набором характеристик. Такая группировка является свободной, то есть на самом деле не задаёт отношения между элементами таких типов, а помогает определить и описать их поведения и правила, которым они должны следовать, особенно когда дело доходит до сложных деталейю Также возможна ситуация когда элемент не входит ни в одну из этих категорий. Существует три основных типа категорий контента - это основные категории контента описывающие общие для многих элементов правила, категории контента для элементов форм описывающие общее правило для элементов форм, особые категории контента описывающие редкие категории актуальные только для нескольких элементов, возможно лишь в особом контексте.",
    "codeexample": "",
    "images": [
      "https://www.dropbox.com/scl/fi/tz6qgip8ve5slu25dxubi/html5_content-model.webp?rlkey=d3chhz2nwehvu5oxcx8hfujbb&st=vkvm80mq&dl=1"
    ]
  },
  {
    "id": "51",
    "theme": "h",
    "title": "Что такое элемент <output> в HTML5?",
    "answer": "Элемент output требуется, когда нужно отобразить сумму двух введённых чисел в виде текста. В примере: есть два поля для ввода и нужно сложить числа из этих полей, после чего отобразить их сумму в виде текста. Для этого на тег формы добавляется специальный атрибут oninput данные с которого автоматически передаются в тег output. Также можно использовать атрибут форм для повышения читаемости, а для преобразования значений используется JS метод parseInt. ",
    "codeexample": "<form onsubmit=\"return false\" oninput=\"o.value = parseInt(a.value) + parseInt(b.value)\"> \n\t<input name=Ma\" type=\"number\"> +\n\t<input name=\"b\" type=\"number\"> =\n\t<output name=\"o\" />\n</form>\n\n// Using for\n<output name=\"o\" for=\"a b\"></output>",
    "images": []
  },
  {
    "id": "52",
    "theme": "h",
    "title": "Что такое свойство valueAsNumber?",
    "answer": "JavaScript свойство valueAsNumber для полей формы, в частности для number date и  range, возвращает значение в виде числа, а не строки, то есть больше нет необходимости использовать parseInt или parseFloat, данные автоматически суммируется или вычитаются без необходимости их приведения к числовому типу.",
    "codeexample": "<form onsubmit=\"return false\" oninput=\"o.value = a.valueAsNumber + b.valueAsNumber\">\n\t<input name=\"a\" id=\"a\" type=\"number\" step=\"any\"> +\n\t<input name=\"b\" id=\"b\" type=\"number\" step=\"any\"> =\n\t<output name=\"o\" for=\"a b\"></output>\n</form>",
    "images": []
  },
  {
    "id": "61",
    "theme": "h",
    "title": "Разница между <meter> и <progress>?",
    "answer": "Элемент meter определяет собой числовое, возможно дробное значение в известном диапазоне. Этот элемент не подходит для измерения чего-то вроде температуры, поскольку она не имеет фиксированного диапазона. Для использования данного тега должно быть известно максимальное значение, однако meter может, например, использоваться для отображения занятого места на жёстком диске. Дополнительно у данного тега на UI есть различные цветовые обозначения в зависимости от наполненности шкалы. Элемент progress используется для отображения хода выполнения задачи. В отличие от элемента meter, прогресс описанный в progress может быть не окончательным, например можно написать, что задание выполняется, но неизвестно, когда задача будет выполнена до конца.",
    "codeexample": "",
    "images": [
      "https://www.dropbox.com/scl/fi/fhzu82wf8adqnshf8agsd/progressbar.gif?rlkey=x09l3z6vpe0j331j7glmr4udd&st=g8xkb3ie&dl=1",
      "https://www.dropbox.com/scl/fi/ba4asoj9vqeltzlesijwz/meter.webp?rlkey=5bz297io7lmzx8i77hn7m1tci&st=1hwy8scf&dl=1"
    ]
  }
]
